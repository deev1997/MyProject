steps:
  - label: "Terraform Init"
    key: "terraform-init"
    command: |
      cd terraform/
      echo "Running terraform init..."
      terraform init -input=false -no-color
      ls -la
      mkdir -p ../tmp
      mv .terraform ../tmp
      mv .terraform.lock.hcl ../tmp
    artifact_paths:
      - "terraform/.terraform/**" # Upload .terraform directory
      - "terraform/.terraform.lock.hcl"  # Upload lock file
      - "../tmp"

  - label: "Terraform Plan"
    key: "terraform-plan"
    depends_on: "terraform-init"
    command: |
      cd terraform/
      ls -la
      ls -la ../tmp
      cp ../tmp/.terraform .
      cp ../tmp/.terraform.lock.hcl .
      echo "Running terraform plan..."
      terraform plan -input=false -no-color -out=tfplan
    artifact_paths:
      - "terraform/.terraform/**" # Upload .terraform directory
      - "terraform/.terraform.lock.hcl"  # Upload lock file
      - "../tmp"

  - label: "Terraform Apply"
    key: "terraform-apply"
    depends_on: "terraform-plan"
    command: |
      cd terraform/
      buildkite-agent artifact download "terraform/.terraform/**" .  # Download .terraform directory
      buildkite-agent artifact download "terraform/.terraform.lock.hcl" .  # Download lock file
      
      echo "Running terraform apply..."
      terraform apply -input=false -no-color tfplan

  - label: "Terraform Refresh"
    key: "terraform-refresh"
    depends_on: "terraform-apply"
    command: |
      cd terraform/
      echo "Running terraform refresh..."
      terraform refresh -input=false -no-color

  - label: "Generate Inventory"
    key: "generate-inventory"
    depends_on: "terraform-refresh"
    command: |
      cd terraform/
      echo "Generating inventory..."
      ./generate_inventory.sh

  - label: "Run Ansible Playbook"
    key: "ansible-playbook"
    depends_on: "generate-inventory"
    command: |
      cd ansible/
      ansible-playbook -i inventory.ini install_azure_cli.yml
